{"name": "Verify that login in Cura is working fine", "status": "failed", "statusDetails": {"message": "AssertionError: Assertion Fail 2 - Text Not Found \nassert 'Make Appointment' == 'Make Appointmet'\n  \n  - Make Appointmet\n  + Make Appointment\n  ?               +", "trace": "@pytest.mark.smoke\n    @allure.title(\"Verify that login in Cura is working fine\")\n    @allure.description(\"TC #1 - Simple Login Check on Cura Katalon Website\")\n    def test_cura_katalon():\n        driver = webdriver.Chrome()\n        driver.get(\"https://katalon-demo-cura.herokuapp.com/\")\n        driver.maximize_window()\n        # make_apt_element = driver.find_element(By.LINK_TEXT, \"Make Appointment\")\n        # make_apt_element.click()\n        # By. Link Text works with only a \"anchor\" tag\n        # It will perform full/exact match with the text\n        # If 2 elements with same name exists, it will return the first\n        # If there's no link text, it will not be able to find the element.\n    \n        # Partial text - this also works with a \"anchor\" tag\n        # This will match with partial text given\n        # Make\n        # App\n        # oint\n        # check for contains keyword\n        # it will find the first unique element\n    \n        make_apt_element = driver.find_element(By.PARTIAL_LINK_TEXT, \"oint\")\n        make_apt_element.click()\n    \n        assert driver.current_url == \"https://katalon-demo-cura.herokuapp.com/profile.php#login\", (\"Assertion Fail - \"\n                                                                                                   \"!Error Matching the \"\n                                                                                                   \"URLs\")\n        print(driver.current_url)\n        username_element = driver.find_element(By.ID, \"txt-username\")\n        username_element.send_keys(\"John Doe\")\n        pwd_element = driver.find_element(By.ID, \"txt-password\")\n        pwd_element.send_keys(\"ThisIsNotAPassword\")\n        login_element = driver.find_element(By.ID, \"btn-login\")\n        login_element.click()\n        verify_apt = driver.find_element(By.CLASS_NAME, \"col-sm-12\")\n>       assert verify_apt.text == \"Make Appointmet\", \"Assertion Fail 2 - Text Not Found \"\nE       AssertionError: Assertion Fail 2 - Text Not Found \nE       assert 'Make Appointment' == 'Make Appointmet'\nE         \nE         - Make Appointmet\nE         + Make Appointment\nE         ?               +\n\nsrc\\19Apr24\\test_lab_019.py:44: AssertionError"}, "description": "TC #1 - Simple Login Check on Cura Katalon Website", "start": 1713678086668, "stop": 1713678112222, "uuid": "073def0d-f7a0-41e0-b71b-736441722336", "historyId": "4d3e875913125165b6d8b1d86a8e5a30", "testCaseId": "4d3e875913125165b6d8b1d86a8e5a30", "fullName": "src.19Apr24.test_lab_019#test_cura_katalon", "labels": [{"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "src.19Apr24"}, {"name": "suite", "value": "test_lab_019"}, {"name": "host", "value": "USHYDNITISHJ04"}, {"name": "thread", "value": "11396-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.19Apr24.test_lab_019"}]}