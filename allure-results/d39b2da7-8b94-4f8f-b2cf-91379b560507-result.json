{"name": "test_cura_katalon", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=123.0.6312.123)\nStacktrace:\n\tGetHandleVerifier [0x00007FF610E17032+63090]\n\t(No symbol) [0x00007FF610D82C82]\n\t(No symbol) [0x00007FF610C1EB1D]\n\t(No symbol) [0x00007FF610C65D56]\n\t(No symbol) [0x00007FF610C5A708]\n\t(No symbol) [0x00007FF610C86FDA]\n\t(No symbol) [0x00007FF610C5A00A]\n\t(No symbol) [0x00007FF610C871F0]\n\t(No symbol) [0x00007FF610CA3412]\n\t(No symbol) [0x00007FF610C86D83]\n\t(No symbol) [0x00007FF610C583A8]\n\t(No symbol) [0x00007FF610C59441]\n\tGetHandleVerifier [0x00007FF6112125AD+4238317]\n\tGetHandleVerifier [0x00007FF61124F70D+4488525]\n\tGetHandleVerifier [0x00007FF6112479EF+4456495]\n\tGetHandleVerifier [0x00007FF610EF0576+953270]\n\t(No symbol) [0x00007FF610D8E54F]\n\t(No symbol) [0x00007FF610D89224]\n\t(No symbol) [0x00007FF610D8935B]\n\t(No symbol) [0x00007FF610D79B94]\n\tBaseThreadInitThunk [0x00007FFFE07E7344+20]\n\tRtlUserThreadStart [0x00007FFFE1FC26B1+33]", "trace": "def test_cura_katalon():\n        driver = webdriver.Chrome()\n        driver.get(\"https://katalon-demo-cura.herokuapp.com/\")\n        driver.maximize_window()\n        # make_apt_element = driver.find_element(By.LINK_TEXT, \"Make Appointment\")\n        # make_apt_element.click()\n        # By. Link Text works with only a \"anchor\" tag\n        # It will perform full/exact match with the text\n        # If 2 elements with same name exists, it will return the first\n        # If there's no link text, it will not be able to find the element.\n    \n        # Partial text - this also works with a \"anchor\" tag\n        # This will match with partial text given\n        # Make\n        # App\n        # oint\n        # check for contains keyword\n        # it will find the first unique element\n    \n        # make_apt_element = driver.find_element(By.PARTIAL_LINK_TEXT, \"oint\")\n        # make_apt_element.click()\n    \n        # By TagName\n        list_of_tags = driver.find_elements(By.TAG_NAME, \"a\")\n        make_apt_element = list_of_tags[4]\n>       make_apt_element.click()\n\nsrc\\19Apr24\\test_lab_019.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022849AE6C30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF610D79B94]\\\\n\\\\tBaseThreadInitThunk [0x00007FFFE07E7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFFE1FC26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=123.0.6312.123)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF610E17032+63090]\nE       \t(No symbol) [0x00007FF610D82C82]\nE       \t(No symbol) [0x00007FF610C1EB1D]\nE       \t(No symbol) [0x00007FF610C65D56]\nE       \t(No symbol) [0x00007FF610C5A708]\nE       \t(No symbol) [0x00007FF610C86FDA]\nE       \t(No symbol) [0x00007FF610C5A00A]\nE       \t(No symbol) [0x00007FF610C871F0]\nE       \t(No symbol) [0x00007FF610CA3412]\nE       \t(No symbol) [0x00007FF610C86D83]\nE       \t(No symbol) [0x00007FF610C583A8]\nE       \t(No symbol) [0x00007FF610C59441]\nE       \tGetHandleVerifier [0x00007FF6112125AD+4238317]\nE       \tGetHandleVerifier [0x00007FF61124F70D+4488525]\nE       \tGetHandleVerifier [0x00007FF6112479EF+4456495]\nE       \tGetHandleVerifier [0x00007FF610EF0576+953270]\nE       \t(No symbol) [0x00007FF610D8E54F]\nE       \t(No symbol) [0x00007FF610D89224]\nE       \t(No symbol) [0x00007FF610D8935B]\nE       \t(No symbol) [0x00007FF610D79B94]\nE       \tBaseThreadInitThunk [0x00007FFFE07E7344+20]\nE       \tRtlUserThreadStart [0x00007FFFE1FC26B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "start": 1713677608302, "stop": 1713677633017, "uuid": "5088f11f-1318-49a5-abbb-a66712a9cf91", "historyId": "4d3e875913125165b6d8b1d86a8e5a30", "testCaseId": "4d3e875913125165b6d8b1d86a8e5a30", "fullName": "src.19Apr24.test_lab_019#test_cura_katalon", "labels": [{"name": "parentSuite", "value": "src.19Apr24"}, {"name": "suite", "value": "test_lab_019"}, {"name": "host", "value": "USHYDNITISHJ04"}, {"name": "thread", "value": "12620-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.19Apr24.test_lab_019"}]}